from web3 import Web3, HTTPProvider
          
def test_block_number():
    url = 'https://rpc.ankr.com/bsc_testnet_chapel' 
    
    web3 = Web3(HTTPProvider(url))
    print(web3.eth.block_number, web3.is_connected())
    
    contract_bytecode = '0x60206102e16000396000518060a01c6102dc5760405260206103016000396000518060a01c6102dc57606052346102dc576020610321600039600051156102dc57606051156102dc57604051156102dc5733600455604051600055606051600155602061032160003960005160025561025b6100806100003961025b610000f36003361161000c57610115565b60003560e01c63ec8ac4d8811861005f5760243610610249576004358060a01c610249576101a0526101a051606052336080523460a05261004e6101c0610151565b6101c05060016101c05260206101c0f35b63539b84068118610083576004361061024957346102495760005460405260206040f35b63521eb27381186100a7576004361061024957346102495760015460405260206040f35b632c4e722e81186100cb576004361061024957346102495760025460405260206040f35b63a9e5d97a81186100ef576004361061024957346102495760035460405260206040f35b638da5cb5b8118610113576004361061024957346102495760045460405260206040f35b505b33606052336080523460a05261012c6101a0610151565b6101a050005b6040516002548082028115838383041417156102495790509050815250565b606051156102495760a051156102495760a05160405261017160e0610132565b60e05160c05260035460a051808201828110610249579050905060035560005463851d1c2760e05260805161010052600454610120526060516101405260c05161016052602060e0608460fc6000855af16101d1573d600060003e3d6000fd5b60203d106102495760e0518060011c610249576101805261018090505115610249576060516080517f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad1860a05160e05260c05161010052604060e0a3600060006000600060a0516001546000f115610249576001815250565b600080fda165767970657283000307000b005b600080fd' # replace with your contract bytecode
    
    contract_abi = '[{"name": "Paused", "inputs": [], "anonymous": false, "type": "event"}, {"name": "Unpaused", "inputs": [], "anonymous": false, "type": "event"}, {"name": "Transfer", "inputs": [{"name": "sender", "type": "address", "indexed": true}, {"name": "receiver", "type": "address", "indexed": true}, {"name": "amount", "type": "uint256", "indexed": false}], "anonymous": false, "type": "event"}, {"name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true}, {"name": "spender", "type": "address", "indexed": true}, {"name": "amount", "type": "uint256", "indexed": false}], "anonymous": false, "type": "event"}, {"name": "OwnershipTransferred", "inputs": [{"name": "previousOwner", "type": "address", "indexed": true}, {"name": "newOwner", "type": "address", "indexed": true}], "anonymous": false, "type": "event"}, {"name": "Blacklist", "inputs": [{"name": "blackListed", "type": "address", "indexed": true}, {"name": "value", "type": "bool", "indexed": false}], "anonymous": false, "type": "event"}, {"name": "UpdateFees", "inputs": [{"name": "txfee", "type": "uint256", "indexed": false}, {"name": "burnfee", "type": "uint256", "indexed": false}, {"name": "feeAddress", "type": "address", "indexed": true}], "anonymous": false, "type": "event"}, {"stateMutability": "nonpayable", "type": "constructor", "inputs": [{"name": "_txfee", "type": "uint256"}, {"name": "_burnfee", "type": "uint256"}, {"name": "_feeAddress", "type": "address"}], "outputs": []}, {"stateMutability": "pure", "type": "function", "name": "name", "inputs": [], "outputs": [{"name": "", "type": "string"}]}, {"stateMutability": "pure", "type": "function", "name": "symbol", "inputs": [], "outputs": [{"name": "", "type": "string"}]}, {"stateMutability": "pure", "type": "function", "name": "decimals", "inputs": [], "outputs": [{"name": "", "type": "uint8"}]}, {"stateMutability": "nonpayable", "type": "function", "name": "pause", "inputs": [], "outputs": [{"name": "", "type": "bool"}]}, {"stateMutability": "nonpayable", "type": "function", "name": "unpause", "inputs": [], "outputs": [{"name": "", "type": "bool"}]}, {"stateMutability": "nonpayable", "type": "function", "name": "transfer", "inputs": [{"name": "receiver", "type": "address"}, {"name": "amount", "type": "uint256"}], "outputs": [{"name": "", "type": "bool"}]}, {"stateMutability": "nonpayable", "type": "function", "name": "transferFrom", "inputs": [{"name": "sender", "type": "address"}, {"name": "receiver", "type": "address"}, {"name": "amount", "type": "uint256"}], "outputs": [{"name": "", "type": "bool"}]}, {"stateMutability": "nonpayable", "type": "function", "name": "_transferFrom", "inputs": [{"name": "_signer", "type": "address"}, {"name": "sender", "type": "address"}, {"name": "receiver", "type": "address"}, {"name": "amount", "type": "uint256"}], "outputs": [{"name": "", "type": "bool"}]}, {"stateMutability": "nonpayable", "type": "function", "name": "approve", "inputs": [{"name": "spender", "type": "address"}, {"name": "amount", "type": "uint256"}], "outputs": [{"name": "", "type": "bool"}]}, {"stateMutability": "nonpayable", "type": "function", "name": "burn", "inputs": [{"name": "amount", "type": "uint256"}], "outputs": [{"name": "", "type": "bool"}]}, {"stateMutability": "nonpayable", "type": "function", "name": "mint", "inputs": [{"name": "receiver", "type": "address"}, {"name": "amount", "type": "uint256"}], "outputs": [{"name": "", "type": "bool"}]}, {"stateMutability": "nonpayable", "type": "function", "name": "addMinter", "inputs": [{"name": "target", "type": "address"}], "outputs": [{"name": "", "type": "bool"}]}, {"stateMutability": "nonpayable", "type": "function", "name": "permit", "inputs": [{"name": "owner", "type": "address"}, {"name": "spender", "type": "address"}, {"name": "amount", "type": "uint256"}, {"name": "expiry", "type": "uint256"}, {"name": "signature", "type": "bytes"}], "outputs": [{"name": "", "type": "bool"}]}, {"stateMutability": "nonpayable", "type": "function", "name": "updateFees", "inputs": [{"name": "newTxfee", "type": "uint256"}, {"name": "newBurnfee", "type": "uint256"}, {"name": "newFeeAddress", "type": "address"}], "outputs": [{"name": "", "type": "bool"}]}, {"stateMutability": "nonpayable", "type": "function", "name": "blacklist", "inputs": [{"name": "listAddress", "type": "address"}, {"name": "isblackListed", "type": "bool"}], "outputs": [{"name": "", "type": "bool"}]}, {"stateMutability": "nonpayable", "type": "function", "name": "transferOwnership", "inputs": [{"name": "newOwner", "type": "address"}], "outputs": [{"name": "", "type": "bool"}]}, {"stateMutability": "view", "type": "function", "name": "totalSupply", "inputs": [], "outputs": [{"name": "", "type": "uint256"}]}, {"stateMutability": "view", "type": "function", "name": "balanceOf", "inputs": [{"name": "arg0", "type": "address"}], "outputs": [{"name": "", "type": "uint256"}]}, {"stateMutability": "view", "type": "function", "name": "allowance", "inputs": [{"name": "arg0", "type": "address"}, {"name": "arg1", "type": "address"}], "outputs": [{"name": "", "type": "uint256"}]}, {"stateMutability": "view", "type": "function", "name": "isPaused", "inputs": [], "outputs": [{"name": "", "type": "bool"}]}, {"stateMutability": "view", "type": "function", "name": "blackListAddresses", "inputs": [{"name": "arg0", "type": "address"}], "outputs": [{"name": "", "type": "bool"}]}, {"stateMutability": "view", "type": "function", "name": "txfee", "inputs": [], "outputs": [{"name": "", "type": "uint256"}]}, {"stateMutability": "view", "type": "function", "name": "burnfee", "inputs": [], "outputs": [{"name": "", "type": "uint256"}]}, {"stateMutability": "view", "type": "function", "name": "feeAddress", "inputs": [], "outputs": [{"name": "", "type": "address"}]}, {"stateMutability": "view", "type": "function", "name": "owner", "inputs": [], "outputs": [{"name": "", "type": "address"}]}, {"stateMutability": "view", "type": "function", "name": "isMinter", "inputs": [{"name": "arg0", "type": "address"}], "outputs": [{"name": "", "type": "bool"}]}, {"stateMutability": "view", "type": "function", "name": "nonces", "inputs": [{"name": "arg0", "type": "address"}], "outputs": [{"name": "", "type": "uint256"}]}, {"stateMutability": "view", "type": "function", "name": "DOMAIN_SEPARATOR", "inputs": [], "outputs": [{"name": "", "type": "bytes32"}]}]' # replace with your contract ABI

    # # Create a deployment transaction
    # contract = web3.eth.contract(abi=contract_abi, bytecode=contract_bytecode)
    # transaction = contract.constructor('0x7a1C309D91740f20Bdd1b2695f457B7B1e31D06c', '0xf13A9b7234F1239CCe0354Bfd46d31c7ceb9B404', 1).build_transaction({
    #     'from': '0xB055c4F4B746B0F8f391A46f39cDAb19886E4F38', # replace with your testnet BNB address
    #     'nonce': web3.eth.get_transaction_count('0xB055c4F4B746B0F8f391A46f39cDAb19886E4F38'), # replace with your testnet BNB address
    #     'gas': 1219695,
    #     'gasPrice': web3.to_wei('5', 'gwei')
    # })

    # # Sign and send the deployment transaction
    # signed = web3.eth.account.signTransaction(transaction, '03088a395dc91869c6f51606bb21277fd68c1539e84dba325e216164ae67e43b') # replace with the private key of your testnet BNB address
    # transaction_hash = web3.eth.send_raw_transaction(signed.rawTransaction)

    # # Wait for the deployment to be mined
    # transaction_receipt = web3.eth.wait_for_transaction_receipt(transaction_hash)

    # # The contract address is the address of the last returned log
    # contract_address = transaction_receipt['contractAddress']
    # print(contract_address)

    # Now you can interact with the deployed contract using the contract address and ABI
    contract_instance = web3.eth.contract(address='0x7a1C309D91740f20Bdd1b2695f457B7B1e31D06c', abi=contract_abi)
    transaction = contract_instance.functions.mint('0x21c683Ee36243d01dFDB2fbA4f8c1A8FC8C4cD49', 10000000 *10 ** 18,).build_transaction({
        'from': '0x21c683Ee36243d01dFDB2fbA4f8c1A8FC8C4cD49', # replace with your testnet BNB address
        'nonce': web3.eth.get_transaction_count('0x21c683Ee36243d01dFDB2fbA4f8c1A8FC8C4cD49'), # replace with your testnet BNB address
        'gas': 1219695,
        'gasPrice': web3.to_wei('5', 'gwei')
    })
    
    signed = web3.eth.account.signTransaction(transaction, 'e88b1d0208d41bfc852b597e85e4320389dd338361a53c90ca60ab99ca6e5387') # replace with the private key of your testnet BNB address
    transaction_hash = web3.eth.send_raw_transaction(signed.rawTransaction)
    
if __name__ == "__main__":
    test_block_number()